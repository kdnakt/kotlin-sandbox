/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.4.31"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.1-jre")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

application {
    // Define the main class for the application.
    mainClass.set("gradle.simple.plugin.AppKt")
}

// Custom Plugin
class GreetingPlugin: Plugin<Project> {
    override fun apply(target: Project) {
        target.task("hello") {
            doLast {
                println("Hello from GreetingPlugin!!")
            }
        }
    }
}

// apply the plugin
apply<GreetingPlugin>()


// Custom plugin extension
//abstract class GreetingPlugin2Extension {
//    abstract val message: Property<String>
//    init {
//        message.convention("Hello from GreetingPlugin2")
//    }
//}
//
//// java.lang.ArrayIndexOutOfBoundsException: 0
////        at org.gradle.internal.instantiation.generator.DependencyInjectingInstantiator.addServicesToParameters(DependencyInjectingInstantiator.java:167)
//class GreetingPlugin2 @Inject constructor(): Plugin<Project> {
//    override fun apply(target: Project) {
//        val extension = project.extensions.create<GreetingPlugin2Extension>("greeting2")
//        target.task("hello2") {
//            doLast {
//                println(extension.message.get())
//            }
//        }
//    }
//}
//
//apply<GreetingPlugin2>()
//
//the<GreetingPlugin2Extension>().message.set("Hi from Gradle")
//

// custom plugin with configuration block
//interface GreetingPlugin3Extension {
//    val message: Property<String>
//    val greeter: Property<String>
//}
//
//// also doesn't work...
//class GreetingPlugin3 @Inject constructor(): Plugin<Project> {
//    override fun apply(target: Project) {
//        val extension = project.extensions.create<GreetingPlugin3Extension>("greeting3")
//        target.task("hello3") {
//            doLast {
//                println("${extension.message.get()} from ${extension.greeter.get()}")
//            }
//        }
//    }
//}
//
//apply<GreetingPlugin3>()
//
//configure<GreetingPlugin3Extension> {
//    message.set("Hi Hi Hi")
//    greeter.set("Gradle")
//}
